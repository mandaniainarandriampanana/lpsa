<?php

namespace Lpsa\AppBundle\Repository;

use Lpsa\CoreBundle\Repository\AbstractGenericRepository;

/**
 * EvenementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EvenementRepository extends AbstractGenericRepository
{
    public function speedSearch($numeroEnregistrement){
        $select="SELECT e FROM LpsaAppBundle:Evenement e ";
        $condition=" WHERE e.numeroEnregistrement LIKE '%".$numeroEnregistrement."%'";
        
        $query=$this->_em->createQuery($select." ".$condition);
        return $query->getResult();
    }
    public function search($form,$helper,$isPaqssse = 0,$all = false){
        /**
         * PREPARATION DES PARAMMETRES
         */
        $niveauRisque=$priorite=$idDepotCategorie=$idDepot=$idEvenementCategorie=$idEvenementStatut=$idResponsableservice=$debutEmission=$finEmission=$debutFaits=$finFaits=$debutEnquete=$finEnquete=null;
        
        if(is_array($form)){
            $niveauRisque = (array_key_exists('niveauRisque',$form)) ? $form['niveauRisque'] : null;
            $priorite = (array_key_exists('priorite',$form)) ? $form['priorite'] : null;
            $idDepotCategorie=(array_key_exists('idDepotCategorie',$form)) ? $form['idDepotCategorie'] : null;
            $idDepot=(array_key_exists('idDepot',$form)) ? $form['idDepot'] : null;
            $idEvenementCategorie=(array_key_exists('idEvenementCategorie',$form)) ? $form['idEvenementCategorie'] : null;
            $idEvenementStatut=(array_key_exists('idEvenementStatut',$form)) ? $form['idEvenementStatut'] : null;
            $idResponsableservice=(array_key_exists('idResponsableservice',$form)) ? $form['idResponsableservice'] : null;

            $debutEmission = (array_key_exists('debutEmission',$form)) ? $helper->convertDateFrStringToDateTime($form['debutEmission']) : null;
            $finEmission = (array_key_exists('finEmission',$form)) ? $helper->convertDateFrStringToDateTime($form['finEmission']) : null;
            $debutFaits = (array_key_exists('debutFaits',$form)) ? $helper->convertDateFrStringToDateTime($form['debutFaits']) : null;
            $finFaits = (array_key_exists('finFaits',$form)) ? $helper->convertDateFrStringToDateTime($form['finFaits']) : null;
            $debutEnquete = (array_key_exists('debutEnquete',$form)) ? $helper->convertDateFrStringToDateTime($form['debutEnquete']) : null;
            $finEnquete = (array_key_exists('finEnquete',$form)) ? $helper->convertDateFrStringToDateTime($form['finEnquete']) : null;
        }
        /**
         * CHAMP SELECTIONS
         */
        $paqssseField = '';
        if($isPaqssse){
            $paqssseField = ',paqssse';
        }
        $select="SELECT e,es,d,ec $paqssseField FROM LpsaAppBundle:Evenement e";
        $select .= " JOIN e.depot d ";
        $select .= " JOIN e.categorie ec ";
        $select .= " JOIN e.userDeclarant declarant ";
        $condition = '';
        if($isPaqssse){
            $select .= " JOIN e.paq3se paqssse ";
            
            // Gestion de la Paqssse
            if($niveauRisque != null){
                $condition=$condition." AND paqssse.niveauRisque = ".$niveauRisque;
            }
            if($priorite!=null){
                $prioriteString = $this->convertPriorite($priorite);
                $condition=$condition." AND paqssse.priorite LIKE '%".$prioriteString."%'";
            }
            // Fin Gestion de la Paqssse
        } 
        if(!$all){
            $condition=" AND e.isPaqssse = ".$isPaqssse; 
        }
        
        if($idDepotCategorie!=null){
            $select=$select." JOIN d.depotcategories dc";
            $condition=$condition." AND dc.id = ".$idDepotCategorie;
        }
        if($idDepot!=null){
            $condition=$condition." AND d.id = ".$idDepot;
        }
        if($idEvenementCategorie!=null){
            $condition=$condition." AND ec.id = ".$idEvenementCategorie;
        }
        $select=$select." LEFT JOIN e.evenementStatut es ";
        if($idEvenementStatut!=null){
            $condition=$condition." AND es.id = ".$idEvenementStatut;
        }
        if($idResponsableservice!=null){
            $select=$select." JOIN e.evenementActionProgres ea JOIN ea.responsableService rs";
            $condition=$condition." AND rs.id = ".$idResponsableservice;
        }
        if(is_array($form) && array_key_exists('declarantId',$form) && !empty($form['declarantId'])){
            $condition .= " AND declarant.id = ".$form['declarantId'];
        }
        /**
         * CHAMPS DATES
         */
        if($debutEmission!=null || $finEmission!=null){
            $condition=$this->conditionWithDateEmission($debutEmission,$finEmission,$condition);  
        }
        if($debutFaits!=null || $finFaits!=null){
            $condition=$this->conditionWithDateFaits($debutFaits,$finFaits,$condition);
        }
        if($debutEnquete!=null || $finEnquete!=null){
            $select=$select." JOIN e.evenementEnquete ee ";
            $condition=$this->conditionWithDateEnquete($debutEnquete,$finEnquete,$condition);
        }
        //=======INJECTION DE LA CONDITION DANS LA REQUETE=====
        $query=$this->_em->createQuery($select." WHERE 1=1 ".$condition . ' ORDER BY e.dateEmission DESC');
        //=======INJECTION DES PARAMETRES===============
        if($debutEmission!=null || $finEmission!=null){
            $query=$this->queryWithDateEmission($debutEmission,$finEmission,$query);  
        }
        if($debutFaits!=null || $finFaits!=null){
            $query=$this->queryWithDateFaits($debutFaits,$finFaits,$query);
        }
        if($debutEnquete!=null || $finEnquete!=null){
            $query=$this->queryWithDateEnquete($debutEnquete,$finEnquete,$query);
        }
        
        return $query;
        
    }
    public function conditionWithDateEnquete($debutEnquete,$finEnquete,$condition){
        if($debutEnquete!=null && $finEnquete!=null){
            $condition=$condition." AND ee.date BETWEEN :debutEnquete AND :finEnquete";
            return $condition;
        }
        if($debutEnquete!=null && $finEnquete==null){
            $condition=$condition." AND ee.date >= :debutEnquete";
            return $condition;
        }
        if($debutEnquete==null && $finEnquete!=null){
            $condition=$condition." AND ee.date <= :finEnquete";
            return $condition;
        }
    }
    public function conditionWithDateEmission($debutEmission,$finEmission,$condition){
        if($debutEmission!=null && $finEmission!=null){
            $condition=$condition." AND e.dateEmission BETWEEN :debutEmission AND :finEmission";
            return $condition;
        }
        if($debutEmission!=null && $finEmission==null){
            $condition=$condition." AND e.dateEmission >= :debutEmission";
            return $condition;
        }
        if($debutEmission==null && $finEmission!=null){
            $condition=$condition." AND e.dateEmission <= :finEmission";
            return $condition;
        }
    }
    public function conditionWithDateFaits($debutFaits,$finFaits,$condition){
        if($debutFaits!=null && $finFaits!=null){
            $condition=$condition." AND e.dateDesFaits BETWEEN :debutFaits AND :finFaits";
            return $condition;
        }
        if($debutFaits!=null && $finFaits==null){
            $condition=$condition." AND e.dateDesFaits >= :debutFaits";
            return $condition;
        }
        if($debutFaits==null && $finFaits!=null){
            $condition=$condition." AND e.dateDesFaits <= :finFaits";
            return $condition;
        }
    }
    public function queryWithDateEmission($debutEmission,$finEmission,$query){
        if($debutEmission!=null && $finEmission!=null){
            $query->setParameter('debutEmission',$debutEmission)
                    ->setParameter('finEmission',$finEmission);
            return $query;
        }
        if($debutEmission!=null && $finEmission==null){
            $query->setParameter('debutEmission',$debutEmission);
            return $query;
        }
        if($debutEmission==null && $finEmission!=null){
            $query->setParameter('finEmission',$finEmission);
            return $query;
        }
    }
    public function queryWithDateFaits($debutFaits,$finFaits,$query){
        if($debutFaits!=null && $finFaits!=null){
            $query->setParameter('debutFaits',$debutFaits)
                    ->setParameter('finFaits',$finFaits);
            return $query;
        }
        if($debutFaits!=null && $finFaits==null){
            $query->setParameter('debutFaits',$debutFaits);
            return $query;
        }
        if($debutFaits==null && $finFaits!=null){
            $query->setParameter('finFaits',$finFaits);
            return $query;
        }
    }
    public function queryWithDateEnquete($debutEnquete,$finEnquete,$query){
        if($debutEnquete!=null && $finEnquete!=null){
            $query->setParameter('debutEnquete',$debutEnquete)
                    ->setParameter('finEnquete',$finEnquete);
            return $query;
        }
        if($debutEnquete!=null && $finEnquete==null){
            $query->setParameter('debutEnquete',$debutEnquete);
            return $query;
        }
        if($debutEnquete==null && $finEnquete!=null){
            $query->setParameter('finEnquete',$finEnquete);
            return $query;
        }
    }
    public function convertPriorite($priorite){
        if($priorite == 1){return "Basse";}
        if($priorite == 2){return "Moyenne";}
        if($priorite == 3){return "Haute";}
    }
    /**
     * 
     * @param int $id
     * @return mixed
     */
    public function findAllEvennementByDepot($id){
        $qb = $this->createQueryBuilder('event');
        $qb->select('event')
            ->innerJoin('event.depot', 'depot')
            ->where('depot.id = :id')
            ->setParameter('id', $id);
        $q = $qb->getQuery();

        return $q->getResult();
    }
    
    public function findWithCorporelByDate($dateStart,$dateEnd){
        $qb = $this->createQueryBuilder('event');
        $qb->select(array('event','corporel','typeCorporel'))
            ->innerJoin('event.corporel', 'corporel')
            ->innerJoin('corporel.typeCorporel','typeCorporel')
            ->where('event.dateEmission >= :dateStart')
            ->andWhere('event.dateEmission <= :dateEnd')
            ->andWhere('event.isPaqssse = 0')
            ->setParameter('dateEnd',$dateEnd->format('Y-m-d'))
            ->setParameter('dateStart',$dateStart->format('Y-m-d'))
        ;
        $qb->orderBy('event.dateEmission','ASC');

        return $qb->getQuery()->getResult();
    }

    public function findWithEnvironmentByDate($dateStart,$dateEnd){
        $qb = $this->createQueryBuilder('event');
        $qb->select(array('event','environnement','typeEnvironnement'))
            ->innerJoin('event.environnement', 'environnement')
            ->innerJoin('environnement.typeEnvironnement', 'typeEnvironnement')
            ->where('event.dateEmission >= :dateStart')
            ->andWhere('event.dateEmission <= :dateEnd')
            ->andWhere('event.isPaqssse = 0')
            ->setParameter('dateEnd',$dateEnd->format('Y-m-d'))
            ->setParameter('dateStart',$dateStart->format('Y-m-d'))
        ;
        $qb->orderBy('event.dateEmission','ASC');

        return $qb->getQuery()->getResult();
    }

    public function findWithDepotCategorieByDate($dateStart,$dateEnd){
        $qb = $this->createQueryBuilder('event');
        $qb->select(array('event','depot','depotcategories','corporel','typeCorporel'))
            ->innerJoin('event.corporel', 'corporel')
            ->innerJoin('corporel.typeCorporel','typeCorporel')
            ->innerJoin('event.depot', 'depot')
            ->innerJoin('depot.depotcategories', 'depotcategories')
            ->where('event.dateEmission >= :dateStart')
            ->andWhere('event.dateEmission <= :dateEnd')
            ->andWhere('event.isPaqssse = 0')
            ->setParameter('dateEnd',$dateEnd->format('Y-m-d'))
            ->setParameter('dateStart',$dateStart->format('Y-m-d'))
        ;
        $qb->orderBy('event.dateEmission','ASC');

        return $qb->getQuery()->getResult();
    }

    public function findWithCategorieByDate($dateStart,$dateEnd){
        $qb = $this->createQueryBuilder('event');
        $qb->select(array('event','categorie'))
            ->innerJoin('event.categorie', 'categorie')
            ->where('event.dateEmission >= :dateStart')
            ->andWhere('event.dateEmission <= :dateEnd')
            ->andWhere('event.isPaqssse = 0')
            ->setParameter('dateEnd',$dateEnd->format('Y-m-d'))
            ->setParameter('dateStart',$dateStart->format('Y-m-d'))
        ;
        $qb->orderBy('event.dateEmission','ASC');

        return $qb->getQuery()->getResult();
    }

    public function findAllPaqssse($dateStart,$dateEnd){
        $qb = $this->createQueryBuilder('event');
        $qb->select(array('event','paq3se'))
           ->innerJoin('event.paq3se', 'paq3se')
           ->where('event.dateEmission >= :dateStart')
           ->andWhere('event.dateEmission <= :dateEnd')
           ->andWhere('event.isPaqssse = 1')
           ->setParameter('dateEnd',$dateEnd->format('Y-m-d'))
           ->setParameter('dateStart',$dateStart->format('Y-m-d'));
        $qb->orderBy('event.dateEmission','ASC');
        return $qb->getQuery()->getResult();
    }

    public function getLatestEventByDate($date){
        $query = $this->createQueryBuilder('event')
                ->where('event.dateDesFaits <= :date')
                ->andWhere('event.isPaqssse = 0')
                ->setParameter('date',$date->format('Y-m-d'))
                ->setMaxResults(1)
                ->getQuery();
        return $query->getOneOrNullResult();
    }

    public function getLastEvent($nbResults){
        return $this->createQueryBuilder('event')
                ->leftJoin('event.paq3se','paq3se')
                ->where('event.isPaqssse = 0')
                ->setMaxResults($nbResults)
                ->getQuery()
                ->getResult();
    }
    public function countEvent(){
        return $this->createQueryBuilder('event')
                ->select('count(event.id)')
                ->where('event.isPaqssse = 0')
                ->getQuery()
                ->getSingleScalarResult();
    }
    public function findAllDescByDateEmission($dateStart = null,$dateEnd = null){
        $qb = $this->createQueryBuilder('event');
        $qb->select('event')
            ->innerJoin('event.depot', 'depot')
            ->innerJoin('event.categorie', 'categorie')
            ->leftJoin('event.gravite', 'gravite')
            ->innerJoin('event.evenementStatut', 'evenementStatut')
            ->innerJoin('depot.depotcategories','depotcategories')
            ->where('event.isPaqssse = 0');
        if($dateStart){
            $qb->andWhere('event.dateEmission >= :dateStart')
               ->andWhere('event.dateEmission <= :dateEnd')
               ->setParameter('dateEnd',$dateEnd->format('Y-m-d'))
               ->setParameter('dateStart',$dateStart->format('Y-m-d'));
        }
        $qb->orderBy('event.dateEmission','DESC');
        $q = $qb->getQuery();

        return $q->getResult();
    }
    public function findAllNotPaqssse(){
        $qb = $this->createQueryBuilder('event');
        $qb->select('event')
           ->where('event.isPaqssse = 0');
        return $qb->getQuery()->getResult();
    }
}

